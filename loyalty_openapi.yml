openapi: 3.0.2
servers:
  - url: /api/v1
info:
  description: |-
    This is a Loyalty Server based on the OpenAPI 3.0 specification.
  version: 1.0.0
  title: Swagger Loyalty - OpenAPI 3.0
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: user
    description: Operations about loyalty user
  - name: member
    description: Operations about merchant member  
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: 'Creates list of users with given input array'
      x-swagger-router-controller: UserController
      operationId: createUsersWithListInput
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'    
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string    
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'    
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      x-swagger-router-controller: UserController
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /member:
    post:
      tags:
        - member
      summary: Create member
      description: This can only be done by the logged in user.
      operationId: createMember
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
            application/xml:
              schema:
                $ref: '#/components/schemas/Member'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
          application/xml:
            schema:
              $ref: '#/components/schemas/Member'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Member'
        description: Created user object
  /member/{merchantid}:
    get:
      tags:
        - member
      summary: Get members from the system
      description: 'This can only be done by the logged in admin user.'
      operationId: memberList
      parameters:
        - name: merchantid
          in: path
          description: 'The merchantid that needs to be fetched. Use merchat1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
            application/xml:
              schema:
                $ref: '#/components/schemas/Member'    
        '400':
          description: Invalid merchantid supplied
        '404':
          description: Member not found
    put:
      tags:
        - member
      summary: Update member
      x-swagger-router-controller: MemberController
      description: This can only be done by the logged in admin user.
      operationId: updateMember
      parameters:
        - name: merchantid
          in: path
          description: The member that need to be updated
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
      requestBody:
        description: Update an existent member in the merchat
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
          application/xml:
            schema:
              $ref: '#/components/schemas/Member'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Member'
    delete:
      tags:
        - member
      summary: Delete member
      description: This can only be done by the logged in admin user.
      operationId: deleteMember
      parameters:
        - name: merchantid
          in: path
          description: The member that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid merchantid supplied
        '404':
          description: Member not found  

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    User:
      x-swagger-router-model: io.swagger.royalty.model.User
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: 12345
        phone:
          type: string
          example: 12345
        userStatus:
          type: integer
          format: int32
          example: 1
          description: User Status
      xml:
        name: user
      type: object
    Member:
      x-swagger-router-model: io.swagger.royalty.model.Member
      properties:
        userId:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: theUser
        merchantList:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/MerchantList'
        memberType:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/MerchantTypeList'
        memberRole:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Roles'
        reference:
          type: string
          example: P000004
        remark:
          type: string
          example: Testing
        memberStatus:
          type: integer
          format: int32
          example: 1
          description: Member Status
      xml:
        name: member
      type: object
    MerchantList:
      x-swagger-router-model: io.swagger.royalty.model.MerchantList
      properties:
        merchants:
          type: array
          xml:
            attribute: false
            wrapped: false
          items:
              type: string
              xml:  
                name: Mr.Potato
    MerchantTypeList:
      x-swagger-router-model: io.swagger.royalty.model.MerchantTypeList
      properties:
        memberTypes:
          type: array
          xml:
            attribute: false
            wrapped: false
          items:
              type: string
              xml:  
                name: Pototo hour
    Roles:
      x-swagger-router-model: io.swagger.royalty.model.Roles
      properties:
        roles:
          type: array
          xml:
            attribute: false
            wrapped: false
          items:
              type: string
              xml:  
                name: Admin
        



